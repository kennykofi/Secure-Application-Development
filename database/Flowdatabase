create table users
(
    user_id          serial
        primary key,
    email            varchar(255)                        not null
        unique,
    password_hash    varchar(255)                        not null,
    full_name        varchar(255)                        not null,
    status           varchar(50)
        constraint users_status_check
            check ((status)::text = ANY
                   ((ARRAY ['active'::character varying, 'on hold'::character varying, 'verified'::character varying])::text[])),
    creation_date    timestamp default CURRENT_TIMESTAMP not null,
    last_login_date  timestamp,
    pin_hash         varchar(255),
    is_verified      boolean   default false             not null,
    citizenship_type varchar(50)
        constraint users_citizenship_type_check
            check ((citizenship_type)::text = ANY
                   ((ARRAY ['citizen'::character varying, 'foreign citizen'::character varying])::text[])),
    passport_number  varchar(50),
    id_number        varchar(50)
);

alter table users
    owner to postgres;

create table user_consents
(
    consent_id                    serial
        primary key,
    user_id                       integer
        references users,
    data_processing_consent       boolean           not null,
    data_processing_timestamp     timestamp,
    marketing_consent             boolean           not null,
    marketing_consent_timestamp   timestamp,
    third_party_sharing           boolean           not null,
    third_party_sharing_timestamp timestamp,
    cookie_consent                integer default 1 not null,
    cookie_timestamp              timestamp,
    setup_completed_timestamp     timestamp,
    last_updated_timestamp        timestamp
);

alter table user_consents
    owner to postgres;

create table two_factor_authentication
(
    auth_id        serial
        primary key,
    user_id        integer
        references users,
    auth_code_hash varchar(255)                        not null,
    timestamp      timestamp default CURRENT_TIMESTAMP not null,
    status         varchar(50)
        constraint two_factor_authentication_status_check
            check ((status)::text = ANY
                   ((ARRAY ['verified'::character varying, 'sent'::character varying, 'expired'::character varying, 'failed'::character varying])::text[]))
);

alter table two_factor_authentication
    owner to postgres;


create table security_logs
(
    log_id            serial
        primary key,
    user_id           integer
        references users,
    event_type        varchar(100),
    event_date        timestamp default CURRENT_TIMESTAMP not null,
    event_description text
);

alter table security_logs
    owner to postgres;

create table login_attempts
(
    attempt_id      serial
        primary key,
    user_id         integer
        references users,
    login_timestamp timestamp default CURRENT_TIMESTAMP not null,
    ip_address      varchar(50),
    browser_details varchar(255),
    status          varchar(50)
        constraint login_attempts_status_check
            check ((status)::text = ANY
                   ((ARRAY ['successful'::character varying, 'failure'::character varying, 'locked out'::character varying])::text[]))
);

alter table login_attempts
    owner to postgres;

create table documents
(
    document_id     serial
        primary key,
    user_id         integer
        unique
        references users,
    document_type   varchar(50)
        constraint documents_document_type_check
            check ((document_type)::text = ANY
                   ((ARRAY ['ID'::character varying, 'Passport'::character varying])::text[])),
    document_path   varchar(255)                        not null,
    user_photo_path varchar(255),
    upload_date     timestamp default CURRENT_TIMESTAMP not null
);

alter table documents
    owner to postgres;

create table loan_products
(
    loan_product_id  serial
        primary key,
    loan_type        varchar(255)   not null,
    description      text,
    interest_rate    numeric(5, 2)  not null,
    loan_term_months integer        not null,
    max_loan_amount  numeric(15, 2) not null,
    min_credit_score integer
);

alter table loan_products
    owner to postgres;

create table user_loans
(
    user_loan_id     serial
        primary key,
    user_id          integer
        references users,
    loan_product_id  integer
        references loan_products,
    amount_borrowed  numeric(15, 2),
    application_date timestamp default CURRENT_TIMESTAMP,
    loan_status      varchar(50)
);

alter table user_loans
    owner to postgres;

INSERT INTO USERS (email, password_hash, full_name, status, PIN_hash, is_verified, citizenship_type, passport_number, id_number, creation_date, last_login_date)
VALUES
('emily.ross@example.com', 'hashed_pwd_emily234', 'Emily Ross', 'active', 'pin_hash_23456', TRUE, 'citizen', NULL, 'CZ1209876', NOW(), NOW()),
('michael.jordan@example.com', 'hashed_pwd_mike91', 'Michael Jordan', 'verified', 'pin_hash_12345', TRUE, 'foreign citizen', 'US4598765', NULL, NOW(), NOW()),
('sara.connor@example.com', 'hashed_pwd_sara333', 'Sara Connor', 'on hold', 'pin_hash_54321', FALSE, 'citizen', NULL, 'CZ1309865', NOW(), NOW()),
('luke.perry@example.com', 'hashed_pwd_luke112', 'Luke Perry', 'active', 'pin_hash_67890', TRUE, 'foreign citizen', 'UK5598764', NULL, NOW(), NOW()),
('nina.morris@example.com', 'hashed_pwd_nina224', 'Nina Morris', 'verified', 'pin_hash_98765', TRUE, 'citizen', NULL, 'CZ1409854', NOW(), NOW());

INSERT INTO USER_CONSENTS (user_id, data_processing_consent, data_processing_timestamp, marketing_consent, marketing_consent_timestamp, third_party_sharing,
                           third_party_sharing_timestamp, cookie_consent, cookie_timestamp, setup_completed_timestamp, last_updated_timestamp)
VALUES
    (1, TRUE, NOW() - interval '10 days', TRUE, NOW() - interval '10 days', TRUE, NOW() - interval '10 days', 1, NOW() - interval '10 days', NOW(), NOW()),
    (2, TRUE, NOW() - interval '20 days', TRUE, NOW() - interval '20 days', TRUE, NOW() - interval '20 days', 1, NOW() - interval '20 days', NOW(), NOW()),
    (3, TRUE, NOW() - interval '30 days', FALSE, NULL, FALSE, NULL, 1, NOW() - interval '30 days', NOW(), NOW()),
    (4, TRUE, NOW() - interval '40 days', TRUE, NOW() - interval '40 days', TRUE, NOW() - interval '40 days', 1, NOW() - interval '40 days', NOW(), NOW()),
    (5, TRUE, NOW() - interval '50 days', TRUE, NOW() - interval '50 days', TRUE, NOW() - interval '50 days', 1, NOW() - interval '50 days', NOW(), NOW());

INSERT INTO LOGIN_ATTEMPTS (user_id, login_timestamp, ip_address, browser_details, status)
VALUES
    (1, NOW() - interval '1 day', '192.168.1.10', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)', 'successful'),
    (1, NOW() - interval '2 days', '192.168.1.10', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)', 'failure'),
    (2, NOW() - interval '3 hours', '172.16.254.1', 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X)', 'locked out'),
    (3, NOW() - interval '15 minutes', '10.0.0.2', 'Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL)', 'successful'),
    (4, NOW() - interval '6 days', '192.168.1.5', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36', 'successful'),
    (5, NOW() - interval '12 days', '192.168.1.15', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.4 Safari/605.1.15', 'failure');

INSERT INTO TWO_FACTOR_AUTHENTICATION (user_id, auth_code_hash, timestamp, status)
VALUES
    (1, 'auth_hash_23456', NOW() - interval '1 hour', 'verified'),
    (2, 'auth_hash_34567', NOW() - interval '2 days', 'expired'),
    (3, 'auth_hash_45678', NOW() - interval '3 hours', 'failed'),
    (4, 'auth_hash_56789', NOW() - interval '10 minutes', 'sent'),
    (5, 'auth_hash_67890', NOW() - interval '15 minutes', 'verified');

INSERT INTO SECURITY_LOGS (user_id, event_type, event_date, event_description)
VALUES
    (1, 'Login Attempt', NOW(), 'User logged in successfully from IP 192.168.1.1.'),
    (1, 'Password Change', NOW() - interval '5 days', 'User changed password.'),
    (2, 'Login Failure', NOW(), 'Unsuccessful login attempt due to incorrect password.'),
    (3, 'Login Attempt', NOW() - interval '2 days', 'User logged in successfully from IP 192.168.1.2.'),
    (4, 'Account Locked', NOW() - interval '1 day', 'Account locked after multiple unsuccessful login attempts.'),
    (5, 'Login Attempt', NOW() - interval '3 days', 'User logged in successfully from IP 192.168.1.3.'),
    (5, 'Data Access', NOW(), 'User accessed sensitive data.');

INSERT INTO DOCUMENTS (user_id, document_type, document_path, user_photo_path, upload_date)
VALUES
    (1, 'ID', '/documents/id_1.pdf', '/photos/photo_1.jpg', NOW() - interval '15 days'),
    (2, 'Passport', '/documents/passport_2.pdf', '/photos/photo_2.jpg', NOW() - interval '30 days'),
    (3, 'ID', '/documents/id_3.pdf', '/photos/photo_3.jpg', NOW() - interval '20 days'),
    (4, 'Passport', '/documents/passport_4.pdf', '/photos/photo_4.jpg', NOW() - interval '10 days'),
    (5, 'ID', '/documents/id_5.pdf', '/photos/photo_5.jpg', NOW() - interval '5 days');

INSERT INTO LOAN_PRODUCTS (loan_type, description, interest_rate, loan_term_months, max_loan_amount, min_credit_score)
VALUES
    ('Personal Loan', 'Unsecured loans for personal use', 5.5, 60, 50000.00, 650),
    ('Mortgage Loan', 'Long term loan for purchasing property', 3.75, 360, 500000.00, 700),
    ('Auto Loan', 'Loans for purchasing vehicles', 4.5, 72, 75000.00, 600),
    ('Student Loan', 'Support for students covering education costs', 4.2, 120, 30000.00, 580),
    ('Business Loan', 'Funding for business expansion and operations', 6.5, 84, 200000.00, 720);

INSERT INTO USER_LOANS (user_id, loan_product_id, amount_borrowed, application_date, loan_status)
VALUES
    (1, 1, 25000.00, NOW() - interval '15 days', 'Approved'),
    (2, 2, 450000.00, NOW() - interval '30 days', 'Pending'),
    (3, 3, 20000.00, NOW() - interval '20 days', 'Rejected'),
    (4, 4, 15000.00, NOW() - interval '10 days', 'Approved'),
    (5, 5, 50000.00, NOW() - interval '5 days', 'Approved');

--1. System administrator
CREATE ROLE system_administrator NOLOGIN;
ALTER ROLE system_administrator CREATEROLE CREATEDB LOGIN ;
CREATE ROLE test_admin LOGIN PASSWORD 'test123';
GRANT system_administrator TO test_admin;


--2. Database administrator
CREATE ROLE db_admin;
GRANT USAGE ON SCHEMA public TO db_admin;
GRANT ALL PRIVILEGES ON DATABASE postgres TO db_admin;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO db_admin;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO db_admin;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO db_admin;
GRANT CREATE ON SCHEMA public TO db_admin;
ALTER ROLE db_admin LOGIN PASSWORD 'db123';


--3. Developer
CREATE ROLE developer;
GRANT CONNECT ON DATABASE postgres TO developer;
GRANT USAGE ON SCHEMA public TO developer;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO developer;
GRANT CREATE ON SCHEMA public TO developer;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO developer;
ALTER ROLE developer WITH PASSWORD 'd123';
ALTER ROLE developer LOGIN;


--4. Support Team
CREATE ROLE support_team;
GRANT CONNECT ON DATABASE postgres TO support_team;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO support_team;
ALTER ROLE support_team WITH PASSWORD 'st123';
ALTER ROLE support_team LOGIN;


--5. Security officer
CREATE ROLE security_officer NOLOGIN;


--6. super_admin
CREATE ROLE super_admin WITH SUPERUSER LOGIN PASSWORD 's123';
